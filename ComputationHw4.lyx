#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass amsart
\begin_preamble
\usepackage{xcolor}
\pagecolor[rgb]{0.15,0.15,0.15} %black
\color[rgb]{1,1,1} %grey

\newfontfamily\mylistingsfont{PT Mono}
\definecolor{lbcolor}{rgb}{0.2,0.2,0.2}  
\end_preamble
\use_default_options true
\begin_removed_modules
theorems-ams
\end_removed_modules
\begin_modules
eqs-within-sections
figs-within-sections
linguistics
theorems-std
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1cm
\topmargin 1cm
\rightmargin 1cm
\bottommargin 1.5cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Computation HW4
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features booktabs="true" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ID
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Gur Telem
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
206631848
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\undeq}[1]{\underset{\text{#1}}{\underbrace{=}}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\und}[2]{\underset{\text{#2}}{\underbrace{#1}}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\upreq}[1]{\overset{#1}{\overbrace{=}}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\upr}[2]{\overset{#2}{\overbrace{#1}}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\Z}{\mathbb{Z}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\N}{\mathbb{N}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\C}{\mathbb{C}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\P}{\mathbb{P}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\Q}{\mathbb{Q}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\R}{\mathbb{R}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\Ra}{\Longrightarrow}
\end_inset


\begin_inset FormulaMacro
\newcommand{\Lra}{\Longleftrightarrow}
\end_inset


\begin_inset FormulaMacro
\newcommand{\La}{\Longleftarrow}
\end_inset


\begin_inset FormulaMacro
\newcommand{\ra}{\rightarrow}
\end_inset


\begin_inset FormulaMacro
\newcommand{\la}{\leftarrow}
\end_inset


\begin_inset FormulaMacro
\newcommand{\lra}{\longleftrightarrow}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\set}[2]{\left\{  #1\mid#2\right\}  }
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\e}[2]{\left(#1,#2\right)}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\abs}[1]{\left|#1\right|}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\seg}[2]{\left[#1,#2\right]}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\absv}{\left|V\right|}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\renewcommand{\absv}{\left|E\right|}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\sseq}{\subseteq}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\ewfunc}[1]{#1:E\ra\R}
\end_inset


\begin_inset FormulaMacro
\newcommand{\ewfuncp}[1]{#1:E\ra\R^{+}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\ewfuncnn}[1]{#1:E\ra\R_{\geq0}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\vwfunc}[1]{#1:V\ra\R}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\d}{\partial}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\h}[1]{\hat{#1}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\hi}{\hat{i}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\hj}{\hat{j}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\hk}{\hat{k}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\hx}{\hat{x}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\hy}{\hat{y}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\hz}{\hat{z}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\grad}{\vec{\nabla}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\lam}{\lambda}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\oiint}{\varoiint}
\end_inset


\begin_inset FormulaMacro
\newcommand{\eps}{\varepsilon}
\end_inset


\begin_inset FormulaMacro
\newcommand{\ez}{\varepsilon_{0}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\vF}{\vec{F}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\vN}{\vec{N}}
\end_inset


\begin_inset FormulaMacro
\renewcommand{\eps}{\varepsilon}
\end_inset


\begin_inset FormulaMacro
\newcommand{\t}{\theta}
\end_inset


\begin_inset FormulaMacro
\newcommand{\p}{\phi}
\end_inset


\begin_inset FormulaMacro
\newcommand{\vp}{\varphi}
\end_inset


\begin_inset FormulaMacro
\newcommand{\half}{\frac{1}{2}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\tp}{2\pi}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\c}[1]{\dot{#1}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\exp}[1]{\cdot10^{#1}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\hc}{\c h\c c}
\end_inset


\begin_inset FormulaMacro
\newcommand{\hb}{\c{\hslash}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\varF}{\mathcal{F}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\es}{\emptyset}
\end_inset


\begin_inset FormulaMacro
\newcommand{\nin}{\notin}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\Mx}{\left(\left\langle M\right\rangle ,x\right)}
\end_inset


\begin_inset FormulaMacro
\newcommand{\oHP}{\overline{HP}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Copy pastables:
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $\det\left(\begin{matrix}\hi & \hj & \hk\\
\\
\\
\end{matrix}\right)$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula $\det\left(\begin{matrix}\\
\\
\\
\end{matrix}\right)$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula $\det\left(\begin{matrix}\\
\\
\end{matrix}\right)$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula $\int_{x=}\int_{y=}\int_{z=}dzdydx$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula $\int_{\t=}\int_{r=}\int_{z=}dzdrd\t$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula $\int_{r=}\int_{\t=}\int_{\phi=}d\phi d\t dr$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Question
\end_layout

\begin_layout Subsection
\begin_inset Formula $L_{1}=\set{\left(\left\langle M_{1}\right\rangle ,\left\langle M_{2}\right\rangle \right)}{\exists w:f_{M_{1}}\left(w\right)=f_{M_{2}}\left(w\right)}$
\end_inset


\end_layout

\begin_layout Standard
RTP: 
\begin_inset Formula $L_{1}\in RE\backslash R$
\end_inset

.
\end_layout

\begin_layout Proof
We'll define a TM 
\begin_inset Formula $M$
\end_inset

 that will accept the language 
\begin_inset Formula $L_{1}$
\end_inset

.
\end_layout

\begin_layout Proof
Let 
\begin_inset Formula $\left(\left\langle M_{1}\right\rangle ,\left\langle M_{2}\right\rangle \right)$
\end_inset

 a pair of encoded TMs.
\end_layout

\begin_layout Proof
Using a controlled run, we can run simultaneously on both 
\begin_inset Formula $M_{1}$
\end_inset

 and 
\begin_inset Formula $M_{2}$
\end_inset

 on each 
\begin_inset Formula $w_{i}\in\Sigma^{*}$
\end_inset

 and if both 
\begin_inset Formula $M_{1},M_{2}$
\end_inset

 halt and output the same value, then 
\begin_inset Formula $M$
\end_inset

 will accept 
\begin_inset Formula $w_{i}$
\end_inset

.
 Let's describe it formally.
\end_layout

\begin_layout Proof
\begin_inset Formula $M$
\end_inset

 run is:
\end_layout

\begin_layout Proof
For each 
\begin_inset Formula $i\in\left\{ 1,2,3,\dots\right\} $
\end_inset

, take 
\begin_inset Formula $w_{i}\in\Sigma^{*}$
\end_inset

 (assume 
\begin_inset Formula $w_{i}$
\end_inset

 is the 
\begin_inset Formula $i$
\end_inset

-th word in the lexicographical order of 
\begin_inset Formula $\Sigma^{*}$
\end_inset

)
\end_layout

\begin_layout Proof
Run each of 
\begin_inset Formula $M_{1}$
\end_inset

 and 
\begin_inset Formula $M_{2}$
\end_inset

 on each of 
\begin_inset Formula $w_{1},w_{2},\dots,w_{i}$
\end_inset

 for 
\begin_inset Formula $i$
\end_inset

 steps.
\end_layout

\begin_layout Proof
If for a word 
\begin_inset Formula $w_{j}$
\end_inset

 both 
\begin_inset Formula $M_{1}$
\end_inset

 and 
\begin_inset Formula $M_{2}$
\end_inset

 halted and returned the same value, accept 
\begin_inset Formula $\left(\left\langle M_{1}\right\rangle ,\left\langle M_{2}\right\rangle \right)$
\end_inset

 (go to 
\begin_inset Formula $q_{acc}$
\end_inset

).
\end_layout

\begin_layout Proof
If not, continue to the next 
\begin_inset Formula $i$
\end_inset

.
\end_layout

\begin_layout Proof
If 
\begin_inset Formula $\exists w_{i}\in\Sigma^{*}$
\end_inset

 s.t.
 both machines will halt (mark the number of steps until they both halt
 
\begin_inset Formula $k$
\end_inset

) and return the same value, then after 
\begin_inset Formula $\max\left\{ i,k\right\} $
\end_inset

 iterations of 
\begin_inset Formula $M$
\end_inset

's algorithm, we will find it and accept the pair 
\begin_inset Formula $\left(\left\langle M_{1}\right\rangle ,\left\langle M_{2}\right\rangle \right)$
\end_inset

.
\end_layout

\begin_layout Proof
If no such 
\begin_inset Formula $w_{i}$
\end_inset

 exists, then 
\begin_inset Formula $M$
\end_inset

 will continue to run forever for the pair, meaning it will not accept it.
\end_layout

\begin_layout Proof
Thus we proved that 
\begin_inset Formula $L\left(M\right)=L_{1}$
\end_inset

.
\end_layout

\begin_layout Proof
Thus 
\begin_inset Formula $L_{1}\in RE$
\end_inset

 (there's a TM which accepts it).
\end_layout

\begin_layout Proof
Now we want to prove that 
\begin_inset Formula $L_{1}\notin R$
\end_inset

.
\end_layout

\begin_layout Proof
For that we can use the classic move of creating a reduction from 
\begin_inset Formula $HP\leq L_{1}$
\end_inset

.
\end_layout

\begin_layout Proof
The reduction is defined as follows: 
\begin_inset Formula $f\left(\left\langle M\right\rangle ,x\right)=\left(\left\langle M_{x}\right\rangle ,\left\langle M_{x}\right\rangle \right)$
\end_inset

 s.t.
 
\begin_inset Formula $M_{x}$
\end_inset

 is the TM that 
\series bold
ALWAYS
\series default
 runs 
\begin_inset Formula $M$
\end_inset

 on 
\begin_inset Formula $x$
\end_inset

 (whatever the input given to it).
\end_layout

\begin_layout Proof
First, let's prove it's a valid reduction.
 The function is full (as we know, if 
\begin_inset Formula $\left\langle M\right\rangle $
\end_inset

 isn't a valid encoding, we see it as 
\begin_inset Formula $M_{stam}$
\end_inset

 which runs forever).
 Also, we know that the function is computable as we saw in the lecture.
\end_layout

\begin_layout Proof
And now, assume 
\begin_inset Formula $\left(\left\langle M\right\rangle ,x\right)\in HP$
\end_inset

.
 Then it means that 
\begin_inset Formula $M$
\end_inset

 halts for 
\begin_inset Formula $x$
\end_inset

 (and returns whatever value).
 Thus 
\begin_inset Formula $\left\langle M_{x}\right\rangle $
\end_inset

 will always halt and always return the same value.
 So we got that 
\begin_inset Formula $f_{M_{x}}\left(x\right)=f_{M_{x}}\left(x\right)$
\end_inset

 meaning that 
\begin_inset Formula $f\left(\left\langle M\right\rangle ,x\right)=\left(\left\langle M_{x}\right\rangle ,\left\langle M_{x}\right\rangle \right)\in L_{1}$
\end_inset

.
\end_layout

\begin_layout Proof
And the other direction: Let 
\begin_inset Formula $\left(\left\langle M\right\rangle ,x\right)$
\end_inset

 be a TM and an input.
 Assume 
\begin_inset Formula $f\left(\left\langle M\right\rangle ,x\right)=\left(\left\langle M_{x}\right\rangle ,\left\langle M_{x}\right\rangle \right)\in L_{1}$
\end_inset

.
 Thus 
\begin_inset Formula $M_{x}$
\end_inset

 is a TM that runs 
\begin_inset Formula $M$
\end_inset

 on 
\begin_inset Formula $x$
\end_inset

 and halts (with whatever value).
 And thus 
\begin_inset Formula $\left(\left\langle M\right\rangle ,x\right)\in HP$
\end_inset

.
\end_layout

\begin_layout Proof
Thus this is a valid reduction.
 And from the theorem we learned in class, since 
\begin_inset Formula $HP\notin R\Ra L_{1}\notin R$
\end_inset

.
 Thus (along with 
\begin_inset Formula $L_{1}\in RE$
\end_inset

) we got that 
\begin_inset Formula $L_{1}\in RE\backslash R$
\end_inset

 as we wanted.
\end_layout

\begin_layout Proof
Q.E.D
\end_layout

\begin_layout Subsection
\begin_inset Formula $L_{2}=\set{\left(\left\langle M_{1}\right\rangle ,\left\langle M_{2}\right\rangle \right)}{\forall w:f_{M_{1}}\left(w\right)=f_{M_{2}}\left(w\right)}$
\end_inset


\end_layout

\begin_layout Standard
RTP: 
\begin_inset Formula $L_{2}\notin RE$
\end_inset

.
\end_layout

\begin_layout Proof
We'll use 
\begin_inset Formula $L_{\Sigma^{*}}\notin RE$
\end_inset

 that we saw in the lecture.
\end_layout

\begin_layout Proof
And ofc we're going to define a reduction from 
\begin_inset Formula $L_{\Sigma^{*}}\leq L_{2}$
\end_inset

 defined with 
\begin_inset Formula $f\left(\left\langle M\right\rangle \right)=\left(\left\langle M'\right\rangle ,\left\langle M'\right\rangle \right)$
\end_inset

 with 
\begin_inset Formula $M'$
\end_inset

 defined as such:
\end_layout

\begin_layout Proof
Run 
\begin_inset Formula $M$
\end_inset

 on the input.
\end_layout

\begin_layout Proof
If the input was rejected, enter an infinite loop.
\end_layout

\begin_layout Proof
If the input was accepted, 
\begin_inset Formula $M'$
\end_inset

 will output 
\begin_inset Formula $1$
\end_inset

.
\end_layout

\begin_layout Proof
So 
\begin_inset Formula $f$
\end_inset

 is computable.
 It's also full because whatever 
\begin_inset Formula $M$
\end_inset

 is, we can run it (remember universal machines).
 Meaning the function is computable and full.
 Thus we only need to show 
\begin_inset Formula $f\left(\left\langle M\right\rangle \right)\in L_{2}\Lra\left\langle M\right\rangle \in L_{\Sigma^{*}}$
\end_inset

.
\end_layout

\begin_layout Proof
Let 
\begin_inset Formula $M$
\end_inset

 a TM.
\end_layout

\begin_layout Proof
Assume 
\begin_inset Formula $\left\langle M\right\rangle \in L_{\Sigma^{*}}$
\end_inset

.
\end_layout

\begin_layout Proof
Let 
\begin_inset Formula $w\in\Sigma^{*}$
\end_inset

.
\end_layout

\begin_layout Proof
Thus 
\begin_inset Formula $M'$
\end_inset

 as we defined it, will halt in step 
\begin_inset Formula $1$
\end_inset

 for 
\begin_inset Formula $w$
\end_inset

 and will accept.
 Thus 
\begin_inset Formula $M'$
\end_inset

 will output 
\begin_inset Formula $1$
\end_inset

 in step 
\begin_inset Formula $3$
\end_inset

.
 Thus 
\begin_inset Formula $f_{M'}\left(w\right)=1=f_{M'}\left(w\right)\Ra f\left(\left\langle M\right\rangle \right)=\left(\left\langle M'\right\rangle ,\left\langle M'\right\rangle \right)\in L_{2}$
\end_inset

.
 
\end_layout

\begin_layout Proof
Now assume 
\begin_inset Formula $f\left(\left\langle M\right\rangle \right)=\left(\left\langle M'\right\rangle ,\left\langle M'\right\rangle \right)\in L_{2}$
\end_inset

.
\end_layout

\begin_layout Proof
Let 
\begin_inset Formula $w\in\Sigma^{*}$
\end_inset

.
 
\begin_inset Formula $f_{M'}\left(w\right)=f_{M'}\left(w\right)$
\end_inset

 means that 
\begin_inset Formula $M'$
\end_inset

 halts for 
\begin_inset Formula $w$
\end_inset

.
 From out definition of 
\begin_inset Formula $M'$
\end_inset

, this can only happen in step 
\begin_inset Formula $3$
\end_inset

.
 Thus 
\begin_inset Formula $M$
\end_inset

 halted and accepted 
\begin_inset Formula $w$
\end_inset

.
 And since that's true for every 
\begin_inset Formula $w$
\end_inset

, then 
\begin_inset Formula $M$
\end_inset

 accepts every 
\begin_inset Formula $w$
\end_inset

 which means 
\begin_inset Formula $L\left(M\right)=\Sigma^{*}\Ra\left\langle M\right\rangle \in L_{\Sigma^{*}}$
\end_inset

.
\end_layout

\begin_layout Proof
Thus 
\begin_inset Formula $f\left(\left\langle M\right\rangle \right)\in L_{2}\Lra\left\langle M\right\rangle \in L_{\Sigma^{*}}$
\end_inset

.
 And this means that 
\begin_inset Formula $L_{\Sigma^{*}}\leq L_{2}$
\end_inset

 is a valid reduction.
\end_layout

\begin_layout Proof
Since we know that 
\begin_inset Formula $L_{\Sigma^{*}}\notin RE$
\end_inset

 (see the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

ezer.pdf
\end_layout

\end_inset

 on the course's website) it means (from the reduction's theorem) that 
\begin_inset Formula $L_{2}\notin RE$
\end_inset

.
\end_layout

\begin_layout Proof
Q.E.D
\end_layout

\begin_layout Proof

\end_layout

\begin_layout Subsection
\begin_inset Formula $L_{3}=\set{\left\langle M\right\rangle }{\forall M',w:f_{M}\left(\left\langle M'\right\rangle ,w\right)\in\left\{ 0,1\right\} \wedge\left(M'\,\text{stop for w}\,\Lra f_{M}\left(\left\langle M'\right\rangle ,w\right)=1\right)}$
\end_inset


\end_layout

\begin_layout Standard
RTP: 
\begin_inset Formula $L_{3}=\emptyset\in R$
\end_inset

 because 
\begin_inset Formula $M_{rej}$
\end_inset

 which rejects everything immediately decides 
\begin_inset Formula $\emptyset$
\end_inset

.
\end_layout

\begin_layout Proof
Let's prove though that 
\begin_inset Formula $L_{3}=\emptyset$
\end_inset

 (we actually proved most of it in the lecture, I realise in retrospect
 so it's probably similar to that proof so you can skip to the last line
 if you want).
\end_layout

\begin_layout Proof
BWoC 
\begin_inset Formula $L_{3}\neq\emptyset$
\end_inset

.
\end_layout

\begin_layout Proof
Let 
\begin_inset Formula $M\in L_{3}$
\end_inset

.
\end_layout

\begin_layout Proof
We saw in the lecture that 
\begin_inset Formula $RE\backslash R$
\end_inset

 isn't an empty set.
 So let's take any TM from it:
\end_layout

\begin_layout Proof
Let 
\begin_inset Formula $M_{RE}\in RE\backslash R$
\end_inset

.
\end_layout

\begin_deeper
\begin_layout Claim
Thus 
\begin_inset Formula $L\left(M_{RE}\right)$
\end_inset

 isn't decidable.
\end_layout

\end_deeper
\begin_layout Proof
Let's define a new TM.
 for each 
\begin_inset Formula $w$
\end_inset

 input, 
\begin_inset Formula $M_{d}$
\end_inset

 is defined as such:
\end_layout

\begin_layout Proof
Checks if 
\begin_inset Formula $f_{M}\left(\left\langle M_{RE}\right\rangle ,w\right)=1$
\end_inset

 and if not, it halts and rejects 
\begin_inset Formula $w$
\end_inset

.
\end_layout

\begin_layout Proof
Runs 
\begin_inset Formula $w$
\end_inset

 on 
\begin_inset Formula $M_{RE}$
\end_inset

 and returns the same answer as 
\begin_inset Formula $M_{RE}$
\end_inset

.
\end_layout

\begin_layout Proof
From definition 
\begin_inset Formula $M$
\end_inset

 halts on the input 
\begin_inset Formula $\left(\left\langle M_{RE}\right\rangle ,w\right)$
\end_inset

 (because 
\begin_inset Formula $f_{M}\left(\left\langle M_{RE}\right\rangle ,w\right)$
\end_inset

 is well defined for each TM and input).
\end_layout

\begin_layout Proof
Case 1: 
\begin_inset Formula $M_{RE}$
\end_inset

 doesn't halt for 
\begin_inset Formula $w$
\end_inset

.
 Then 
\begin_inset Formula $f_{M}\left(\left\langle M_{RE}\right\rangle ,w\right)=0$
\end_inset

 and 
\begin_inset Formula $M_{d}$
\end_inset

 will halt (reject) in step 
\begin_inset Formula $1$
\end_inset

.
\end_layout

\begin_layout Proof
Case 2: 
\begin_inset Formula $M_{RE}$
\end_inset

 halts for 
\begin_inset Formula $w$
\end_inset

.
 Then 
\begin_inset Formula $f_{M}\left(\left\langle M_{RE}\right\rangle ,w\right)=1$
\end_inset

 and 
\begin_inset Formula $M_{d}$
\end_inset

 will halt in step 
\begin_inset Formula $2$
\end_inset

 while running 
\begin_inset Formula $M_{RE}$
\end_inset

 on 
\begin_inset Formula $w$
\end_inset

.
\end_layout

\begin_layout Proof
So we got that 
\begin_inset Formula $M_{d}$
\end_inset

 halts for every input.
\end_layout

\begin_layout Proof
Additionally, 
\begin_inset Formula $w\in L\left(M_{RE}\right)\Lra M_{RE}\,\text{accepts}\,w\Ra f_{M}\left(\left\langle M_{RE}\right\rangle ,w\right)=1\Ra f_{M_{d}}\left(w\right)=f_{M_{RE}}\left(w\right)\Ra w\in L\left(M_{D}\right)$
\end_inset

.
\end_layout

\begin_layout Proof
But from the definition of 
\begin_inset Formula $M_{d}$
\end_inset

: 
\begin_inset Formula $w\in L\left(M_{d}\right)\Ra w\in L\left(M_{RE}\right)$
\end_inset

.
 So we got 
\begin_inset Formula $L\left(M_{RE}\right)=L\left(M_{d}\right)$
\end_inset

.
\end_layout

\begin_layout Proof
So since 
\begin_inset Formula $M_{d}$
\end_inset

 accepts 
\begin_inset Formula $L\left(M_{RE}\right)$
\end_inset

 and 
\begin_inset Formula $M_{d}$
\end_inset

 halts for every input, we got that 
\begin_inset Formula $L\left(M_{RE}\right)$
\end_inset

 is decidable in direct contradiction to our assumption.
\end_layout

\begin_layout Proof
Thus 
\begin_inset Formula $L_{3}=\emptyset$
\end_inset

.
\end_layout

\begin_layout Proof
And we know that 
\begin_inset Formula $L_{3}=\emptyset=L\left(M_{rej}\right)\in R$
\end_inset

 (every finite language is in 
\begin_inset Formula $R$
\end_inset

).
\end_layout

\begin_layout Proof
Q.E.D
\end_layout

\begin_layout Section
Variations on Rice's Theorem
\end_layout

\begin_layout Subsection
For coRE
\end_layout

\begin_layout Subsubsection
For 
\begin_inset Formula $S$
\end_inset

 trivial attribute.
\end_layout

\begin_layout Standard
For 
\begin_inset Formula $S=\es$
\end_inset

 RTP: 
\begin_inset Formula $L_{S}\in R$
\end_inset

.
\end_layout

\begin_layout Proof
Meaning that 
\begin_inset Formula $L_{S}=\es$
\end_inset

 (if 
\begin_inset Formula $\left\langle M\right\rangle \in L_{S}$
\end_inset

 then 
\begin_inset Formula $L\left(M\right)$
\end_inset

 whatever it is will be in 
\begin_inset Formula $S$
\end_inset

 in contradiction to it being an empty set).
\end_layout

\begin_layout Proof
And we know that 
\begin_inset Formula $\es\in R$
\end_inset

 (for example because it's a finite set).
\end_layout

\begin_layout Standard
For 
\begin_inset Formula $S=coRE$
\end_inset

 RTP: 
\begin_inset Formula $L_{S}\notin R$
\end_inset

.
\end_layout

\begin_layout Proof
Let 
\begin_inset Formula $M$
\end_inset

 be TM.
\end_layout

\begin_layout Proof
Assume 
\begin_inset Formula $\left\langle M\right\rangle \in L_{S}$
\end_inset

 so 
\begin_inset Formula $L\left(M\right)\in S$
\end_inset

.
\end_layout

\begin_layout Proof
But if 
\begin_inset Formula $L\left(M\right)\in S\Ra L\left(M\right)\in RE$
\end_inset

 (because the language has 
\begin_inset Formula $M$
\end_inset

 which accepts it).
\end_layout

\begin_layout Proof
Thus, if we mark 
\begin_inset Formula $S'=R\sseq coRE$
\end_inset

 and also 
\begin_inset Formula $S'\sseq RE$
\end_inset

.
\end_layout

\begin_layout Proof
And because 
\begin_inset Formula $L\left(M\right)\in S\wedge L\left(M\right)\in RE\Ra L\left(M\right)\in R\Ra\left\langle M\right\rangle \in L_{S'}$
\end_inset

.
\end_layout

\begin_layout Proof
So we got that 
\begin_inset Formula $L_{S}\subseteq L_{S'}$
\end_inset

.
 Since there's a TM 
\begin_inset Formula $M'$
\end_inset

 which accepts 
\begin_inset Formula $HP\in RE$
\end_inset

 but 
\begin_inset Formula $HP\notin R$
\end_inset

.
 So 
\begin_inset Formula $HP=L\left(M'\right)\notin S'=R$
\end_inset

.
 But also 
\begin_inset Formula $\left\langle M\right\rangle \in L_{RE}$
\end_inset

 per definition.
\end_layout

\begin_layout Proof
Thus we got that 
\begin_inset Formula $L_{S'}\subset L_{RE}$
\end_inset

.
 We from rice, we know that not only 
\begin_inset Formula $L_{S'}\notin R$
\end_inset

 but also 
\begin_inset Formula $L_{S'}\notin RE$
\end_inset

 (because 
\begin_inset Formula $\emptyset\in S'=R$
\end_inset

).
\end_layout

\begin_layout Proof
Also, since 
\begin_inset Formula $R\subset coRE$
\end_inset

, if 
\begin_inset Formula $M''$
\end_inset

 is a TM such that 
\begin_inset Formula $\left\langle M''\right\rangle \in L_{R}\Ra L\left(M''\right)\in R=S'\subset S=coRE\Ra\left\langle M''\right\rangle \in L_{S}$
\end_inset

.
 Thus 
\begin_inset Formula $L_{S'}\subseteq L_{S}$
\end_inset

 and thus 
\begin_inset Formula $L_{S'}=L_{S}$
\end_inset

.
\end_layout

\begin_layout Proof
Thus we got that 
\begin_inset Formula $L_{S}\notin RE$
\end_inset

 (let alone in 
\begin_inset Formula $R$
\end_inset

).
\end_layout

\begin_layout Proof
We proved that 
\begin_inset Formula $L_{S}\notin R$
\end_inset

.
\end_layout

\begin_layout Subsubsection
Write and prove a theorem for attributes 
\begin_inset Formula $S\sseq coRE$
\end_inset

 s.t.
 
\begin_inset Formula $L_{S}\notin R$
\end_inset

.
\end_layout

\begin_layout Theorem
Let 
\begin_inset Formula $S\sseq coRE$
\end_inset

 s.t.
 
\begin_inset Formula $S\cap R\neq\es$
\end_inset

 
\begin_inset Formula $\Ra$
\end_inset

 
\begin_inset Formula $L_{S}\nin R$
\end_inset

.
\end_layout

\begin_layout Proof
Assume 
\begin_inset Formula $S\sseq coRE$
\end_inset

.
\end_layout

\begin_layout Proof
In the previous section we proved that 
\begin_inset Formula $L\left(M\right)\in coRE\Ra L\left(M\right)\in R$
\end_inset

, this ofc applies for every 
\begin_inset Formula $L\left(M\right)\in S$
\end_inset

 as a subset of 
\begin_inset Formula $coRE$
\end_inset

.
\end_layout

\begin_layout Proof
Let 
\begin_inset Formula $M$
\end_inset

 s.t.
 
\begin_inset Formula $\left\langle M\right\rangle \in L_{S}$
\end_inset

 so 
\begin_inset Formula $L\left(M\right)\in R$
\end_inset

.
\end_layout

\begin_layout Proof
And similarly to how we proved in the first section 
\begin_inset Formula $L_{S}\sseq L_{R}$
\end_inset

.
 Thus 
\begin_inset Formula $L_{S\backslash R}=L_{S}\backslash L_{R}=\es$
\end_inset

 (directly from expanding the definition of 
\begin_inset Formula $L_{?}$
\end_inset

).
\end_layout

\begin_layout Proof
So 
\begin_inset Formula $L_{S}=L_{S}\cap L_{R}=\set{\left\langle M\right\rangle }{L\left(M\right)\in S\wedge L\left(M\right)\in R}=\set{\left\langle M\right\rangle }{L\left(M\right)\in S\cap R}=L_{S\cap R}$
\end_inset

.
\end_layout

\begin_layout Proof
And since 
\begin_inset Formula $S\cap R\subset RE$
\end_inset

 (and because 
\begin_inset Formula $S\cap R\neq\es$
\end_inset

) then 
\begin_inset Formula $S\cap R$
\end_inset

 is a non trivial attribute as defined in the original Rice's theorem.
 Thus 
\begin_inset Formula $L_{S\cap R}\nin R$
\end_inset

.
 And since 
\begin_inset Formula $L_{S}=L_{S\cap R}\Ra L_{S}\nin R$
\end_inset

.
\end_layout

\begin_layout Proof
Q.E.D
\end_layout

\begin_layout Proof
Note: It's also true that if 
\begin_inset Formula $\es\in S$
\end_inset

 then 
\begin_inset Formula $L_{S}\nin RE$
\end_inset

 and is easy to prove.
\end_layout

\begin_layout Subsection
For functions
\end_layout

\begin_layout Subsubsection
RTP: For trivial attribute 
\begin_inset Formula $S$
\end_inset

, 
\begin_inset Formula $L_{S}\in R$
\end_inset

.
\end_layout

\begin_layout Proof
Case 
\begin_inset Formula $1$
\end_inset

: 
\begin_inset Formula $S=\emptyset$
\end_inset

.
\end_layout

\begin_layout Proof
So 
\begin_inset Formula $L_{S}=\emptyset$
\end_inset

 because for each 
\begin_inset Formula $M$
\end_inset

, 
\begin_inset Formula $f_{M}\notin S$
\end_inset

 so 
\begin_inset Formula $\left\langle M\right\rangle \notin L_{S}$
\end_inset

.
 And we know that 
\begin_inset Formula $L_{S}\in R$
\end_inset

.
\end_layout

\begin_layout Proof
Case 
\begin_inset Formula $2$
\end_inset

: 
\begin_inset Formula $S=\varF$
\end_inset

.
\end_layout

\begin_layout Proof
Let 
\begin_inset Formula $M$
\end_inset

 be a TM, then 
\begin_inset Formula $f_{M}\in\varF=S$
\end_inset

.
 Thus 
\begin_inset Formula $\left\langle M\right\rangle \in L_{S}\Ra L_{S}=\set{\left\langle M\right\rangle }{\forall M}$
\end_inset

.
 Thus 
\begin_inset Formula $M_{acc}$
\end_inset

 will decide 
\begin_inset Formula $L_{S}$
\end_inset

 as it will accept every TM (and will ofc halt for each).
\end_layout

\begin_layout Proof
Q.E.D
\end_layout

\begin_layout Subsubsection
RTP: Rice's theorem for functions.
 Can we add condition for 
\begin_inset Formula $S$
\end_inset

 s.t.
 
\begin_inset Formula $L_{S}\notin RE$
\end_inset

?
\end_layout

\begin_layout Proof
Let 
\begin_inset Formula $S\sseq\varF$
\end_inset

.
 Assume 
\begin_inset Formula $S\nin\left\{ \es,\varF\right\} $
\end_inset

.
\end_layout

\begin_layout Proof
We need to prove that 
\begin_inset Formula $L_{S}=\set{\left\langle M\right\rangle }{f_{M}\in S}\nin R$
\end_inset

.
\end_layout

\begin_layout Proof
Let 
\begin_inset Formula $f\in L_{S}$
\end_inset

 (there's one because 
\begin_inset Formula $S\neq\es$
\end_inset

).
 Note that 
\begin_inset Formula $f$
\end_inset

 is computable.
 So there's a TM which calculates it.
\end_layout

\begin_layout Proof
We'll split into cases.
\end_layout

\begin_deeper
\begin_layout Case

\series bold
\begin_inset Formula $f_{M_{stam}}\nin S$
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
We'll define a reduction 
\begin_inset Formula $HP\leq L_{S}$
\end_inset

 with function 
\begin_inset Formula $f_{r}$
\end_inset

.
\end_layout

\begin_layout Standard
So for 
\begin_inset Formula $f_{r}\left(\left\langle M\right\rangle ,x\right)=\left\langle M_{x}\right\rangle $
\end_inset

 with 
\begin_inset Formula $M_{x}$
\end_inset

 defined for input 
\begin_inset Formula $w$
\end_inset

 as such:
\end_layout

\begin_layout Enumerate
Run 
\begin_inset Formula $M$
\end_inset

 on 
\begin_inset Formula $x$
\end_inset

.
\end_layout

\begin_layout Enumerate
Write to the tape 
\begin_inset Formula $f\left(w\right)$
\end_inset

 and halt.
\end_layout

\begin_layout Standard
Since 
\begin_inset Formula $f$
\end_inset

 in computable, 
\begin_inset Formula $f_{r}$
\end_inset

 is a full function and computable.
\end_layout

\begin_layout Standard
So we need to prove 
\begin_inset Formula $\left(\left\langle M\right\rangle ,x\right)\in HP\Lra f\left(\left\langle M\right\rangle ,x\right)\in L_{S}$
\end_inset

.
\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $\Mx$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula $\Ra$
\end_inset

: Assume 
\begin_inset Formula $\Mx\in HP$
\end_inset

.
 Thus, 
\begin_inset Formula $M_{x}$
\end_inset

 will halt sometime during step 
\begin_inset Formula $1$
\end_inset

 and continue to step 
\begin_inset Formula $2$
\end_inset

.
 On step 
\begin_inset Formula $2$
\end_inset

 it will return 
\begin_inset Formula $f\left(w\right)$
\end_inset

.
\end_layout

\begin_layout Standard
Thus 
\begin_inset Formula $f_{M_{x}}=f\in L_{S}$
\end_inset

 (under our assumption).
 So we got 
\begin_inset Formula $\Mx\in HP\Ra f\left(\Mx\right)\in L_{S}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula $\La$
\end_inset

: Assume 
\begin_inset Formula $f\left(\Mx\right)=\left\langle M_{x}\right\rangle \in L_{S}$
\end_inset

.
\end_layout

\begin_layout Standard
Since 
\begin_inset Formula $f_{M_{stam}}\nin S\Ra M$
\end_inset

 halts for 
\begin_inset Formula $x$
\end_inset

 (otherwise 
\begin_inset Formula $f$
\end_inset

 would be a function that is defined for no value as it would never halt).
\end_layout

\begin_layout Standard
Thus 
\begin_inset Formula $\Mx\in HP$
\end_inset

.
\end_layout

\begin_layout Standard
Thus the reduction is a valid one and since 
\begin_inset Formula $HP\nin R\Ra L_{S}\nin R$
\end_inset

 from the reduction's theorem we learned in class.
\end_layout

\end_deeper
\begin_layout Case
\begin_inset Formula $f_{M_{stam}}\in S$
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Since 
\begin_inset Formula $S\neq\varF$
\end_inset

 then there's a computable function 
\begin_inset Formula $f'\nin S$
\end_inset

.
\end_layout

\begin_layout Standard
We'll show a reduction from 
\begin_inset Formula $\overline{HP}\leq L_{S}$
\end_inset

 function 
\begin_inset Formula $f_{r}$
\end_inset

.
 
\begin_inset Formula $f_{r}\left(\Mx\right)=\left\langle M_{x}\right\rangle $
\end_inset

 s.t.
 
\begin_inset Formula $M_{x}$
\end_inset

 is defined for 
\begin_inset Formula $w$
\end_inset

 as such:
\end_layout

\begin_layout Enumerate
Run 
\begin_inset Formula $M$
\end_inset

 on 
\begin_inset Formula $x$
\end_inset

.
\end_layout

\begin_layout Enumerate
Write to the tape 
\begin_inset Formula $f'\left(w\right)$
\end_inset

 and halt.
\end_layout

\begin_layout Standard
Since 
\begin_inset Formula $f'$
\end_inset

 is computable then 
\begin_inset Formula $f_{r}$
\end_inset

 is full and computable.
\end_layout

\begin_layout Standard
\begin_inset Formula $\Ra$
\end_inset

: Assume 
\begin_inset Formula $\Mx\in\oHP$
\end_inset

.
 
\end_layout

\begin_layout Standard
Then 
\begin_inset Formula $M_{x}$
\end_inset

 will never halt in step 
\begin_inset Formula $1$
\end_inset

.
 
\end_layout

\begin_layout Standard
So 
\begin_inset Formula $f_{M_{x}}$
\end_inset

 is a function that is not defined for any input.
 
\end_layout

\begin_layout Standard
Meaning 
\begin_inset Formula $f_{M_{x}}=f_{M_{stam}}$
\end_inset

.
 And as such 
\begin_inset Formula $\left\langle M_{x}\right\rangle \in L_{S}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula $\La$
\end_inset

: Assume 
\begin_inset Formula $f\left(\Mx\right)\in L_{S}$
\end_inset

.
\end_layout

\begin_layout Standard
BWoC, 
\begin_inset Formula $M$
\end_inset

 halts on 
\begin_inset Formula $x$
\end_inset

 as input.
\end_layout

\begin_layout Standard
Thus 
\begin_inset Formula $M_{x}$
\end_inset

 will always halt on step 
\begin_inset Formula $1$
\end_inset

 and thus always return the same value as 
\begin_inset Formula $f'$
\end_inset

.
\end_layout

\begin_layout Standard
So 
\begin_inset Formula $f_{M_{x}}=f'\nin S$
\end_inset

.
 Thus 
\begin_inset Formula $\left\langle M_{x}\right\rangle \nin L_{S}$
\end_inset

 contradiction.
\end_layout

\begin_layout Standard
So we got that 
\begin_inset Formula $M$
\end_inset

 doesn't halt for 
\begin_inset Formula $x$
\end_inset

 meaning that 
\begin_inset Formula $\Mx\in HP$
\end_inset

.
\end_layout

\begin_layout Standard
This proves that the reduction is a valid one.
 And since 
\begin_inset Formula $\oHP\nin RE\Ra L_{S}\nin RE\Ra L_{S}\nin R$
\end_inset

.
\end_layout

\end_deeper
\end_deeper
\begin_layout Proof
This concludes that proof that 
\begin_inset Formula $L_{S}\nin R$
\end_inset

.
\end_layout

\begin_layout Proof
We also found the condition for which 
\begin_inset Formula $L_{S}\nin RE$
\end_inset

 (
\begin_inset Formula $f_{M_{stam}}\in S$
\end_inset

).
\end_layout

\begin_layout Proof
Q.E.D
\end_layout

\begin_layout Subsection
Let 
\begin_inset Formula $S\sseq RE$
\end_inset

 non trivial s.t.
 
\begin_inset Formula $\Sigma^{*}\nin S$
\end_inset

.
 RTP: 
\begin_inset Formula $L_{S}\nin RE$
\end_inset

.
\end_layout

\begin_layout Proof
Since 
\begin_inset Formula $S$
\end_inset

 is non trivial, let 
\begin_inset Formula $M'$
\end_inset

 s.t.
 
\begin_inset Formula $\left\langle M'\right\rangle \in L_{S}$
\end_inset

.
 From the assumption, 
\begin_inset Formula $L\left(M'\right)\neq\Sigma^{*}$
\end_inset

.
\end_layout

\begin_layout Proof
We'll prove it using a reduction 
\begin_inset Formula $\oHP\leq L_{S}$
\end_inset

 with the function 
\begin_inset Formula $f\left(\Mx\right)=\left\langle M_{x}\right\rangle $
\end_inset

 with 
\begin_inset Formula $M_{x}$
\end_inset

 for input 
\begin_inset Formula $w$
\end_inset

 is defined as such:
\end_layout

\begin_deeper
\begin_layout Enumerate
Run 
\begin_inset Formula $M'$
\end_inset

 on 
\begin_inset Formula $w$
\end_inset

.
 If it accepted, halt and accept 
\begin_inset Formula $w$
\end_inset

.
\end_layout

\begin_layout Enumerate
Run 
\begin_inset Formula $M$
\end_inset

 on 
\begin_inset Formula $x$
\end_inset

.
\end_layout

\begin_layout Enumerate
Accept 
\begin_inset Formula $w$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Proof
As we see, the function is computable and full.
 Need to prove 
\begin_inset Formula $f\left(\Mx\right)\in L_{S}=\left\langle M_{x}\right\rangle \in\oHP$
\end_inset

.
\end_layout

\begin_layout Proof
\begin_inset Formula $\Ra$
\end_inset

 Assume 
\begin_inset Formula $f\left(\Mx\right)\in L_{S}$
\end_inset

.
\end_layout

\begin_layout Proof
So 
\begin_inset Formula $\Sigma^{*}\neq L\left(M_{x}\right)\in S$
\end_inset

.
 Thus let 
\begin_inset Formula $w\in\Sigma^{*}$
\end_inset

 be 
\begin_inset Formula $w\nin L\left(M_{x}\right)$
\end_inset

.
 BWoC: 
\begin_inset Formula $M$
\end_inset

 halts for 
\begin_inset Formula $x$
\end_inset

.
\end_layout

\begin_layout Proof
So when running 
\begin_inset Formula $M_{x}$
\end_inset

, during step 
\begin_inset Formula $1$
\end_inset

 we won't accept and go to step 
\begin_inset Formula $2$
\end_inset

.
\end_layout

\begin_layout Proof
In step 
\begin_inset Formula $2$
\end_inset

, we will finish eventually step 
\begin_inset Formula $2$
\end_inset

 and go to accept in step 
\begin_inset Formula $3$
\end_inset

.
\end_layout

\begin_layout Proof
We got 
\begin_inset Formula $w\in L\left(M_{x}\right)$
\end_inset

.
 In contradiction.
 Thus 
\begin_inset Formula $M$
\end_inset

 doesn't halt for 
\begin_inset Formula $x$
\end_inset

.
\end_layout

\begin_layout Proof
\begin_inset Formula $\Mx\in\oHP$
\end_inset

.
\end_layout

\begin_layout Proof
\begin_inset Formula $\La$
\end_inset

 Assume 
\begin_inset Formula $\Mx\in\oHP$
\end_inset

.
\end_layout

\begin_layout Proof
Since 
\begin_inset Formula $L\left(M'\right)\neq\Sigma^{*}$
\end_inset

 let 
\begin_inset Formula $w\nin L\left(M'\right)$
\end_inset

.
\end_layout

\begin_layout Proof
Thus 
\begin_inset Formula $M_{x}$
\end_inset

 will not halt in step 
\begin_inset Formula $1$
\end_inset

.
\end_layout

\begin_layout Proof
And in step 
\begin_inset Formula $2$
\end_inset

 it will get stuck in a loop (infinite).
 Thus 
\begin_inset Formula $w\nin L\left(M_{x}\right)$
\end_inset

.
\end_layout

\begin_layout Proof
Now let 
\begin_inset Formula $w'\in L\left(M'\right)$
\end_inset

.
 Then 
\begin_inset Formula $M_{x}$
\end_inset

 will halt in step 
\begin_inset Formula $1$
\end_inset

 and accept 
\begin_inset Formula $w'$
\end_inset

.
\end_layout

\begin_layout Proof
So 
\begin_inset Formula $w'\in L\left(M_{x}\right)$
\end_inset

.
\end_layout

\begin_layout Proof
We got that 
\begin_inset Formula $w\in L\left(M_{x}\right)\Lra w\in L\left(M'\right)$
\end_inset

.
\end_layout

\begin_layout Proof
Thus 
\begin_inset Formula $L\left(M_{x}\right)=L\left(M'\right)\in S\Ra\left\langle M\right\rangle \in L_{S}$
\end_inset

.
\end_layout

\begin_layout Proof
This concludes the reduction.
 So from the reduction's theorem, we get that since 
\begin_inset Formula $\oHP\nin RE\Ra L_{S}\nin RE$
\end_inset

.
\end_layout

\begin_layout Proof
Q.E.D
\end_layout

\begin_layout Section
Limits on memory and computable functions
\end_layout

\begin_layout Standard
For each function, decide if they're computable.
\end_layout

\begin_layout Subsection
\begin_inset Formula $f_{1}$
\end_inset

 on 
\begin_inset Formula $\left\langle M\right\rangle $
\end_inset

 will return the index of the right most cell that 
\begin_inset Formula $M$
\end_inset

 will reach during its execution on 
\begin_inset Formula $\eps$
\end_inset

.
\end_layout

\begin_layout Standard
Yes! It's computable.
\end_layout

\begin_layout Standard
Since we don't need to prove I will explain in short why it's computable.
\end_layout

\begin_layout Standard
We can build a TM with a few tapes:
\end_layout

\begin_layout Enumerate
For executing 
\begin_inset Formula $M$
\end_inset


\end_layout

\begin_layout Enumerate
For saving all the configurations that we saw 
\begin_inset Formula $M$
\end_inset

 in
\end_layout

\begin_layout Enumerate
Tape to save the max index 
\begin_inset Formula $M$
\end_inset

 reached during execution
\end_layout

\begin_layout Standard
Our TM will run 
\begin_inset Formula $M$
\end_inset

 step by step, and for each step:
\end_layout

\begin_layout Enumerate
If 
\begin_inset Formula $M$
\end_inset

 halted, return the max index.
\end_layout

\begin_layout Enumerate
Update the max index if needed.
\end_layout

\begin_layout Enumerate
Check if the current configuration is one that we already saw, if not, save
 the configuration to the configurations' tape.
\end_layout

\begin_layout Enumerate
If we 
\series bold
did
\series default
 see the current configuration before, return the current max index.
\end_layout

\begin_layout Enumerate
Continue to the next step of 
\begin_inset Formula $M$
\end_inset

.
\end_layout

\begin_layout Standard
If 
\begin_inset Formula $M$
\end_inset

 has a max index, then there are only a constant number of configurations
 it can be in.
 Thus, eventually 
\begin_inset Formula $M$
\end_inset

 will either halt or get into a configuration it was in before.
 Either way we'll halt out TM and return the max index.
\end_layout

\begin_layout Subsection
\begin_inset Formula $f_{x}\left(n\right)=\max\left\{ f_{1}\left(\left\langle M\right\rangle \right):M\in E_{n}\right\} $
\end_inset

 with 
\begin_inset Formula $E_{n}$
\end_inset

 a set of all the TM with 
\begin_inset Formula $n$
\end_inset

 states that stop on 
\begin_inset Formula $\eps$
\end_inset

.
\end_layout

\begin_layout Standard
Yes! It's computable.
\end_layout

\begin_layout Standard
The function is computable.
 Since 
\begin_inset Formula $E_{n}$
\end_inset

 is a finite set for each 
\begin_inset Formula $n$
\end_inset

.
\end_layout

\begin_layout Standard
For each 
\begin_inset Formula $M\in E_{n}$
\end_inset

 it has 
\begin_inset Formula $n$
\end_inset

 states.
 There's a finite number of ways to define it (for each of the 
\begin_inset Formula $3$
\end_inset

 reading options, there are 
\begin_inset Formula $3$
\end_inset

 options for the writing for each, there are 
\begin_inset Formula $3$
\end_inset

 options for movement of the reading head, for each, there's 
\begin_inset Formula $n-1$
\end_inset

 options for the next state).
\end_layout

\begin_layout Standard
Thus 
\begin_inset Formula $E_{n}$
\end_inset

 is a finite set of TMs.
 So we can run the function from section 
\begin_inset Formula $1$
\end_inset

 on each simultaneously (one step on each 
\begin_inset Formula $M\in E_{n}$
\end_inset

 at a time).
\end_layout

\begin_layout Standard
Since all of the TMs halt on 
\begin_inset Formula $\eps$
\end_inset

, then 
\begin_inset Formula $f_{1}$
\end_inset

 will eventually halt with a return value.
 Then we can compare all the values that we got and return the max.
\end_layout

\begin_layout Section
Flexible acceptance
\end_layout

\begin_layout Subsection
Need to PROVE: 
\begin_inset Formula $RE\sseq A$
\end_inset

.
\end_layout

\begin_layout Proof
Let 
\begin_inset Formula $L\left(M\right)\in RE$
\end_inset

.
 
\end_layout

\begin_layout Proof
For each state 
\begin_inset Formula $q$
\end_inset

 in 
\begin_inset Formula $M$
\end_inset

, we're add one more state 
\begin_inset Formula $q'$
\end_inset

 which will mean 
\begin_inset Quotes eld
\end_inset

go immediately left
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Proof
Whenever 
\begin_inset Formula $M$
\end_inset

 is supposed to do an 
\begin_inset Formula $S$
\end_inset

 step and go to state 
\begin_inset Formula $q$
\end_inset

 while writing 
\begin_inset Formula $t$
\end_inset

 to the tape: replace that with writing 
\begin_inset Formula $t$
\end_inset

 to the tape, doing an 
\begin_inset Formula $R$
\end_inset

 step, and moving to state 
\begin_inset Formula $q'$
\end_inset

 instead of 
\begin_inset Formula $q$
\end_inset

.
\end_layout

\begin_layout Proof
If 
\begin_inset Formula $M$
\end_inset

 is in state 
\begin_inset Formula $q'$
\end_inset

, it will do an 
\begin_inset Formula $L$
\end_inset

 step, not changing the tape and moving to state 
\begin_inset Formula $q$
\end_inset

.
\end_layout

\begin_layout Proof
We got an 
\begin_inset Formula $M'$
\end_inset

 which is equivalent to 
\begin_inset Formula $M$
\end_inset

 in the sense that instead of all the 
\begin_inset Formula $S$
\end_inset

 steps in 
\begin_inset Formula $M$
\end_inset

, 
\begin_inset Formula $M'$
\end_inset

 will go right and then immediately left, then continue as 
\begin_inset Formula $M$
\end_inset

 would.
\end_layout

\begin_layout Proof
Thus 
\begin_inset Formula $L\left(M'\right)=L\left(M\right)$
\end_inset

.
 But since 
\begin_inset Formula $M'$
\end_inset

 doesn't do any 
\begin_inset Formula $S$
\end_inset

 steps (let alone an infinite number of them), if 
\begin_inset Formula $w\in Flex-L\left(M'\right)$
\end_inset

 then 
\begin_inset Formula $w\in L\left(M'\right)$
\end_inset

.
 And since 
\begin_inset Formula $w\in L\left(M'\right)$
\end_inset

 per definition means 
\begin_inset Formula $w\in Flex-L\left(M'\right)$
\end_inset

.
\end_layout

\begin_layout Proof
Then we got that 
\begin_inset Formula $Flex-L\left(M'\right)=L\left(M'\right)$
\end_inset

.
\end_layout

\begin_layout Proof
So 
\begin_inset Formula $L\left(M'\right)\in A$
\end_inset

.
\end_layout

\begin_layout Proof
Q.E.D
\end_layout

\begin_layout Subsection
Need to prove 
\begin_inset Formula $\oHP\in A$
\end_inset

.
\end_layout

\begin_layout Proof
Let 
\begin_inset Formula $\Mx$
\end_inset

.
\end_layout

\begin_layout Proof
We'll define a TM 
\begin_inset Formula $M'$
\end_inset

 on 
\begin_inset Formula $\Mx$
\end_inset

 as such:
\end_layout

\begin_deeper
\begin_layout Enumerate
For 
\begin_inset Formula $i\in\left\{ 1,2,\dots\right\} $
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
Run 
\begin_inset Formula $M$
\end_inset

 on 
\begin_inset Formula $x$
\end_inset

 for 
\begin_inset Formula $i$
\end_inset

 steps.
 If 
\begin_inset Formula $M$
\end_inset

 halted, reject 
\begin_inset Formula $\Mx$
\end_inset


\end_layout

\begin_layout Enumerate
Do an 
\begin_inset Formula $S$
\end_inset

 step
\end_layout

\end_deeper
\end_deeper
\begin_layout Proof
Assume 
\begin_inset Formula $\Mx\in\oHP$
\end_inset

.
\end_layout

\begin_layout Proof
Thus during the execution of 
\begin_inset Formula $M'$
\end_inset

, 
\begin_inset Formula $M$
\end_inset

 will never reject in step 1.a.
 So for each 
\begin_inset Formula $i$
\end_inset

 we'll do an 
\begin_inset Formula $S$
\end_inset

 step and continue to the 
\begin_inset Formula $i+1$
\end_inset

th iteration.
\end_layout

\begin_layout Proof
i.e.
 since we never halt but at the same time, we never get stuck on a single
 step, we will do an infinite number of 
\begin_inset Formula $S$
\end_inset

 steps.
\end_layout

\begin_layout Proof
Thus 
\begin_inset Formula $w\in Flex-L\left(M'\right)$
\end_inset

.
\end_layout

\begin_layout Proof
Assume 
\begin_inset Formula $\Mx\nin\oHP$
\end_inset

.
\end_layout

\begin_layout Proof
Thus 
\begin_inset Formula $M$
\end_inset

 will halt on 
\begin_inset Formula $x$
\end_inset

.
 Let's mark 
\begin_inset Formula $k$
\end_inset

 the number of steps 
\begin_inset Formula $M$
\end_inset

 will do before halting.
\end_layout

\begin_layout Proof
As we said, no iteration gets stuck because each sub-step has a finite limit
 on its execution steps.
\end_layout

\begin_layout Proof
Thus in the 
\begin_inset Formula $k$
\end_inset

th iteration, 
\begin_inset Formula $M$
\end_inset

 will halt on 
\begin_inset Formula $x$
\end_inset

 and reject 
\begin_inset Formula $\Mx$
\end_inset

.
 Meaning that 
\begin_inset Formula $\Mx\nin Flex-L\left(M'\right)$
\end_inset

 because there are a finite number of (
\begin_inset Formula $S$
\end_inset

) steps and neither did 
\begin_inset Formula $M'$
\end_inset

 accept 
\begin_inset Formula $\Mx$
\end_inset

.
\end_layout

\begin_layout Proof
Together, we got that 
\begin_inset Formula $\Mx\in\oHP\Lra\Mx\in Flex-L\left(M'\right)$
\end_inset

.
\end_layout

\begin_layout Proof
Then we showed 
\begin_inset Formula $M'$
\end_inset

 TM s.t.
 
\begin_inset Formula $Flex-L\left(M'\right)=\oHP$
\end_inset

.
 Thus 
\begin_inset Formula $\oHP\in A$
\end_inset

.
\end_layout

\begin_layout Proof
Q.E.D
\end_layout

\begin_layout Subsection
RTP: 
\begin_inset Formula $L_{=3}\in A$
\end_inset

.
\end_layout

\begin_layout Proof
Let's build 
\begin_inset Formula $M$
\end_inset

 for which 
\begin_inset Formula $Flex-L\left(M\right)=L_{=3}$
\end_inset

.
\end_layout

\begin_layout Proof
Let 
\begin_inset Formula $M'$
\end_inset

 be a TM.
\end_layout

\begin_layout Proof
As we proved in the first section, for each TM, there's an equivalent TM
 without 
\begin_inset Formula $S$
\end_inset

 steps.
 So let's just assume 
\begin_inset Formula $M'$
\end_inset

 is without 
\begin_inset Formula $S$
\end_inset

 steps (if it includes them, then our 
\begin_inset Formula $M$
\end_inset

 will do the 
\begin_inset Quotes eld
\end_inset

right then left
\begin_inset Quotes erd
\end_inset

 trick instead of doing an 
\begin_inset Formula $S$
\end_inset

 step).
\end_layout

\begin_layout Proof
So our 
\begin_inset Formula $M$
\end_inset

 running on 
\begin_inset Formula $\left\langle M'\right\rangle $
\end_inset

 will be defined as such:
\end_layout

\begin_deeper
\begin_layout Enumerate
For 
\begin_inset Formula $i\in\left\{ 1,2,\dots\right\} $
\end_inset

, 
\begin_inset Formula $w_{i}$
\end_inset

 is the 
\begin_inset Formula $i$
\end_inset

-th word in lexicographic order in 
\begin_inset Formula $\Sigma^{*}$
\end_inset

.
\end_layout

\begin_deeper
\begin_layout Enumerate
Set counter 
\begin_inset Formula $n=0$
\end_inset


\end_layout

\begin_layout Enumerate
Run 
\begin_inset Formula $M'$
\end_inset

 on each of 
\begin_inset Formula $w_{1},w_{2},\dots,w_{i}$
\end_inset

 one by one for 
\begin_inset Formula $i$
\end_inset

 steps (each).
 For each 
\begin_inset Formula $w_{j}$
\end_inset

, if 
\begin_inset Formula $M'$
\end_inset

 accepted it, increase 
\begin_inset Formula $n$
\end_inset

 by 
\begin_inset Formula $1$
\end_inset

.
\end_layout

\begin_layout Enumerate
If 
\begin_inset Formula $n==3$
\end_inset

, do an 
\begin_inset Formula $S$
\end_inset

 step.
\end_layout

\begin_layout Enumerate
If 
\begin_inset Formula $n>3$
\end_inset

, reject 
\begin_inset Formula $\left\langle M'\right\rangle $
\end_inset

.
\end_layout

\end_deeper
\end_deeper
\begin_layout Proof
Note that we only halt 
\begin_inset Formula $M$
\end_inset

 in step 1.d (in which we reject 
\begin_inset Formula $\left\langle M'\right\rangle $
\end_inset

).
\end_layout

\begin_deeper
\begin_layout Case
\begin_inset Formula $\left|L\left(M'\right)\right|=3$
\end_inset

.
 Assume we're in the 
\begin_inset Formula $i$
\end_inset

th iteration, then at most 
\begin_inset Formula $3$
\end_inset

 of the word 
\begin_inset Formula $w_{1},\dots,w_{i}$
\end_inset

 can be accepted (
\begin_inset Formula $M'$
\end_inset

 doesn't accept more than that...).
\end_layout

\begin_deeper
\begin_layout Standard
Thus 
\begin_inset Formula $n$
\end_inset

 will never be set to 
\begin_inset Formula $n>3$
\end_inset

 and we will never reject (and will never halt).
\end_layout

\begin_layout Standard
Now, each of the 
\begin_inset Formula $3$
\end_inset

 words in 
\begin_inset Formula $L\left(M'\right)$
\end_inset

 has a number of steps before 
\begin_inset Formula $M'$
\end_inset

 halts.
 Let us mark 
\begin_inset Formula $k$
\end_inset

 the max of those numbers.
\end_layout

\begin_layout Standard
Again since only 
\begin_inset Formula $3$
\end_inset

 words, let us mark 
\begin_inset Formula $t$
\end_inset

 the word with the max lexicographic index.
\end_layout

\begin_layout Standard
So from the 
\begin_inset Formula $\max\left(k,t\right)$
\end_inset

-th iteration and all iterations following, we will find all of the 
\begin_inset Formula $3$
\end_inset

 words with each iteration.
 Thus making an 
\begin_inset Formula $S$
\end_inset

 step.
\end_layout

\begin_layout Standard
Since we never halt, we will do an infinite number of iterations (each step
 in each iteration has a finite number of execution steps), we will do an
 infinite number of 
\begin_inset Formula $S$
\end_inset

 steps.
\end_layout

\begin_layout Standard
So we got that 
\begin_inset Formula $\left\langle M'\right\rangle \in Flex-L\left(M\right)$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Case
\begin_inset Formula $\left|L\left(M'\right)\right|<3$
\end_inset

.
 In this case we will never reach 
\begin_inset Formula $n==3$
\end_inset

 do we will never halt (let alone accept), nor we will do any 
\begin_inset Formula $S$
\end_inset

 steps.
 Thus 
\begin_inset Formula $\left\langle M'\right\rangle \nin Flex-L\left(M\right)$
\end_inset

.
\end_layout

\begin_layout Case
\begin_inset Formula $\left|L\left(M'\right)\right|>3$
\end_inset

.
 Thus eventually 
\begin_inset Formula $M$
\end_inset

 will find the 
\begin_inset Formula $4$
\end_inset

-th word and halt, rejecting 
\begin_inset Formula $\left\langle M'\right\rangle $
\end_inset

.
 So again 
\begin_inset Formula $\left\langle M'\right\rangle \nin Flex-L\left(M\right)$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Proof
Thus we got that 
\begin_inset Formula $\left|L\left(M'\right)\right|=3\Lra\left\langle M'\right\rangle \in Flex-L\left(M\right)$
\end_inset

.
\end_layout

\begin_layout Proof
Q.E.D
\end_layout

\begin_layout Section
Language Classification
\end_layout

\begin_layout Standard
For each of those, decide if they're in 
\begin_inset Formula $R$
\end_inset

 or 
\begin_inset Formula $RE\backslash R$
\end_inset

 or not in 
\begin_inset Formula $RE$
\end_inset

 at all.
\end_layout

\begin_layout Subsection
\begin_inset Formula $L_{1}=\set{\left\langle M\right\rangle }{M\text{ is a NDTM and there's a calculation path of }M\text{ on }\eps\text{ for which }M\text{ doesn't cross cell index }10}$
\end_inset


\end_layout

\begin_layout Standard
RTP: 
\begin_inset Formula $L_{1}\in R$
\end_inset

.
\end_layout

\begin_layout Proof
Let 
\begin_inset Formula $M$
\end_inset

 a NDTM.
\end_layout

\begin_layout Proof
We'll define 
\begin_inset Formula $M'$
\end_inset

 NDTM on 
\begin_inset Formula $\left\langle M\right\rangle $
\end_inset

 as such:
\end_layout

\begin_deeper
\begin_layout Enumerate
Write 
\begin_inset Formula $\eps$
\end_inset

 to the input of 
\begin_inset Formula $M$
\end_inset


\end_layout

\begin_layout Enumerate
Set an area for past configurations and set an area to save current cell
 index of 
\begin_inset Formula $M$
\end_inset


\end_layout

\begin_layout Enumerate
From the current configuration, run a single step of 
\begin_inset Formula $M$
\end_inset

 (here 
\begin_inset Formula $M'$
\end_inset

 branches together with 
\begin_inset Formula $M$
\end_inset

)
\end_layout

\begin_layout Enumerate
If 
\begin_inset Formula $M$
\end_inset

 passed the 
\begin_inset Formula $10$
\end_inset

th cell, we 
\series bold
halt and reject
\series default
.
\end_layout

\begin_layout Enumerate
If 
\begin_inset Formula $M$
\end_inset

 halted, then 
\series bold
halt and accept
\series default
.
\end_layout

\begin_layout Enumerate
Check if the current configuration of 
\begin_inset Formula $M$
\end_inset

 is one that we already visited.
 If it is, 
\series bold
halt and accept
\series default
.
\end_layout

\begin_layout Enumerate
Save the current configuration of 
\begin_inset Formula $M$
\end_inset

 in the area we set for configurations.
\end_layout

\begin_layout Enumerate
Go to step 
\begin_inset Formula $3$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Proof
If 
\begin_inset Formula $M'$
\end_inset

 will accept 
\begin_inset Formula $\left\langle M\right\rangle $
\end_inset

, then it's only in either step 
\begin_inset Formula $5$
\end_inset

 or 
\begin_inset Formula $6$
\end_inset

.
\end_layout

\begin_layout Proof
Since 
\begin_inset Formula $M'$
\end_inset

 branching follows that of 
\begin_inset Formula $M$
\end_inset

, then it means we found a path with 
\begin_inset Formula $M$
\end_inset

 not passing cell 
\begin_inset Formula $10$
\end_inset

.
 The second we pass cell 
\begin_inset Formula $10$
\end_inset

, we halt that path and we don't continue the execution of 
\begin_inset Formula $M$
\end_inset

.
 Thus if we reached one of the above steps, it means that in the path of
 execution of 
\begin_inset Formula $M$
\end_inset

 we didn't pass cell 
\begin_inset Formula $10$
\end_inset

.
 And we either got stuck in an infinite loop (a configuration we already
 visit in that path of execution) or 
\begin_inset Formula $M$
\end_inset

 halted on 
\begin_inset Formula $\eps$
\end_inset

.
 
\end_layout

\begin_layout Proof
Either way, it's a pass that will never pass cell 
\begin_inset Formula $10$
\end_inset

.
 Thus if 
\begin_inset Formula $M'$
\end_inset

 accepts 
\begin_inset Formula $\left\langle M\right\rangle $
\end_inset

 then there must be a path where 
\begin_inset Formula $M$
\end_inset

 doesn't pass cell 
\begin_inset Formula $10$
\end_inset

.
\end_layout

\begin_layout Proof
And for the other direction:
\end_layout

\begin_layout Proof
Assume 
\begin_inset Formula $M'$
\end_inset

 doesn't accept 
\begin_inset Formula $\left\langle M\right\rangle $
\end_inset

.
 All paths of execution of 
\begin_inset Formula $M'$
\end_inset

 either rejected in step 
\begin_inset Formula $4$
\end_inset

 (meaning that we that path of 
\begin_inset Formula $M$
\end_inset

 passes cell 
\begin_inset Formula $10$
\end_inset

) or never halt.
\end_layout

\begin_layout Proof
BWoC 
\begin_inset Formula $M'$
\end_inset

 has a path that doesn't halt:
\end_layout

\begin_layout Proof
Thus there's a path of execution for 
\begin_inset Formula $M$
\end_inset

 that doesn't pass cell 
\begin_inset Formula $10$
\end_inset

, doesn't halt 
\series bold
and
\series default
 doesn't repeat a configuration.
 This we already know is impossible (finite number of configurations that
 don't include cells after cell 
\begin_inset Formula $10$
\end_inset

).
\end_layout

\begin_layout Proof
Thus if 
\begin_inset Formula $M'$
\end_inset

 doesn't accept 
\begin_inset Formula $\left\langle M\right\rangle $
\end_inset

 is because all paths of executions pass cell 
\begin_inset Formula $10$
\end_inset

.
\end_layout

\begin_layout Proof
Thus 
\begin_inset Formula $\left\langle M\right\rangle $
\end_inset

 is accepted by 
\begin_inset Formula $M'$
\end_inset

 if and only if 
\begin_inset Formula $M$
\end_inset

 has a path of execution that doesn't pass cell 
\begin_inset Formula $10$
\end_inset

.
\end_layout

\begin_layout Proof
We learned in class that there's a 
\begin_inset Formula $M''$
\end_inset

 equivalent to 
\begin_inset Formula $M'$
\end_inset

 but deterministic.
\end_layout

\begin_layout Proof
Thus 
\begin_inset Formula $M''$
\end_inset

 is a TM that halts for every input and accepts 
\begin_inset Formula $L_{1}$
\end_inset

.
\end_layout

\begin_layout Proof
Thus 
\begin_inset Formula $L_{1}\in R$
\end_inset

.
\end_layout

\begin_layout Proof
Q.E.D
\end_layout

\begin_layout Proof
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsection
\begin_inset Formula $L_{2}=\set{\left\langle M\right\rangle }{M\text{ a NDTM and there isn't a finite path of execution for \ensuremath{M} on \eps}}$
\end_inset

.
\end_layout

\begin_layout Standard
RTP: 
\begin_inset Formula $L_{2}\nin RE$
\end_inset

.
\end_layout

\begin_layout Standard
We'll use a reduction 
\begin_inset Formula $L_{\leq3}\leq L_{2}$
\end_inset

 defined with 
\begin_inset Formula $f\left(\left\langle M\right\rangle \right)=\left\langle M'\right\rangle $
\end_inset

 a NDTM (with all branchings to identical configurations).
 
\begin_inset Formula $M'$
\end_inset

 is defined as such (regardless of the input):
\end_layout

\begin_layout Enumerate
For 
\begin_inset Formula $i\in\left\{ 1,2,\dots\right\} $
\end_inset

, 
\begin_inset Formula $w_{i}$
\end_inset

 is the 
\begin_inset Formula $i$
\end_inset

-th word in lexicographic order in 
\begin_inset Formula $\Sigma^{*}$
\end_inset

.
\end_layout

\begin_deeper
\begin_layout Enumerate
Set the counter 
\begin_inset Formula $n=0$
\end_inset

.
\end_layout

\begin_layout Enumerate
Run 
\begin_inset Formula $M$
\end_inset

 on each of 
\begin_inset Formula $w_{1},w_{2},\dots,w_{i}$
\end_inset

 one by one for 
\begin_inset Formula $i$
\end_inset

 steps (each).
 For each 
\begin_inset Formula $w_{j}$
\end_inset

, if 
\begin_inset Formula $M$
\end_inset

 accepted it, increase 
\begin_inset Formula $n$
\end_inset

 by 
\begin_inset Formula $1$
\end_inset

.
\end_layout

\begin_layout Enumerate
If 
\begin_inset Formula $n>3$
\end_inset

 then halt and reject.
\end_layout

\end_deeper
\begin_layout Proof
Since we want an NDTM, we define it as such that all the branches run the
 same configuration on the same index of step.
\end_layout

\begin_layout Proof
This is a computable and full function.
\end_layout

\begin_layout Proof
Note that every step in each iteration is bound to a finite execution time.
 Thus we will either halt or for each 
\begin_inset Formula $i$
\end_inset

, we will eventually reach the 
\begin_inset Formula $i$
\end_inset

th iteration.
\end_layout

\begin_layout Proof
\begin_inset Formula $\Ra\left\langle M\right\rangle \in L_{\leq3}$
\end_inset

.
\end_layout

\begin_layout Proof
Thus, in no iteration we will find 
\begin_inset Formula $n>3$
\end_inset

 as the words 
\begin_inset Formula $w_{1},w_{2},\dots,w_{i}$
\end_inset

 are different from each other.
 Thus step 
\begin_inset Formula $c$
\end_inset

 will never halt the execution.
\end_layout

\begin_layout Proof
So since we don't halt the operation of 
\begin_inset Formula $M'$
\end_inset

 at any other point, 
\begin_inset Formula $M'$
\end_inset

 will never halt (all branches are identical, so there won't be even one
 finite path).
\end_layout

\begin_layout Proof
Making 
\begin_inset Formula $\left\langle M'\right\rangle \in L_{2}$
\end_inset

.
\end_layout

\begin_layout Proof
\begin_inset Formula $\La$
\end_inset

 
\begin_inset Formula $f\left(\left\langle M\right\rangle \right)=\left\langle M'\right\rangle \in L_{2}$
\end_inset

.
\end_layout

\begin_layout Proof
Meaning that all paths of execution are infinite.
\end_layout

\begin_layout Proof
Since all paths are identical as we defined them, it means that we never
 halt in step c.
\end_layout

\begin_layout Proof
BWoC, there are at least 
\begin_inset Formula $4$
\end_inset

 words in 
\begin_inset Formula $L\left(M\right)$
\end_inset

.
\end_layout

\begin_layout Proof
Mark with 
\begin_inset Formula $k$
\end_inset

 the max between the number of iterations required for each of the first
 
\begin_inset Formula $4$
\end_inset

 words, and the lexicographical index of the last of those 
\begin_inset Formula $4$
\end_inset

 words.
\end_layout

\begin_layout Proof
So in the 
\begin_inset Formula $k$
\end_inset

th iteration, we will get that 
\begin_inset Formula $M$
\end_inset

 accept 
\begin_inset Formula $4$
\end_inset

 of the 
\begin_inset Formula $w_{i}$
\end_inset

(s).
 Thus making 
\begin_inset Formula $n>3$
\end_inset

 meaning that 
\begin_inset Formula $M'$
\end_inset

 will halt.
\end_layout

\begin_layout Proof
Thus 
\begin_inset Formula $L\left(M\right)$
\end_inset

 contains at most 
\begin_inset Formula $3$
\end_inset

 words.
 Meaning that 
\begin_inset Formula $\left\langle M\right\rangle \in L_{\leq3}$
\end_inset

.
\end_layout

\begin_layout Proof
————————–
\end_layout

\begin_layout Proof
Thus we concluded the proof that it's a valid induction and from the induction's
 theorem, and since 
\begin_inset Formula $L_{\leq3}\nin RE$
\end_inset

, we get that 
\begin_inset Formula $L_{2}\nin RE$
\end_inset

 either.
\end_layout

\begin_layout Proof
Q.E.D
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsection
\begin_inset Formula $L_{3}=\set{\left\langle M\right\rangle }{M\text{ a NDTM and there is a path of execution for \ensuremath{M} on \eps\ s.t. \ensuremath{M} visits the same configuration twice}}$
\end_inset


\end_layout

\begin_layout Standard
Almost identical to the proof from section 5.1.
 Except that we reject it we halted copy pasting and changing what is needed:
\end_layout

\begin_layout Proof
Let 
\begin_inset Formula $M$
\end_inset

 a NDTM.
\end_layout

\begin_layout Proof
We'll define 
\begin_inset Formula $M'$
\end_inset

 NDTM on 
\begin_inset Formula $\left\langle M\right\rangle $
\end_inset

 as such:
\end_layout

\begin_deeper
\begin_layout Enumerate
Write 
\begin_inset Formula $\eps$
\end_inset

 to the input of 
\begin_inset Formula $M$
\end_inset


\end_layout

\begin_layout Enumerate
Set an area for past configurations
\end_layout

\begin_layout Enumerate
From the current configuration, run a single step of 
\begin_inset Formula $M$
\end_inset

 (here 
\begin_inset Formula $M'$
\end_inset

 branches together with 
\begin_inset Formula $M$
\end_inset

)
\end_layout

\begin_layout Enumerate
Check if the current configuration of 
\begin_inset Formula $M$
\end_inset

 is one that we already visited.
 If it is, 
\series bold
halt and accept
\series default
.
\end_layout

\begin_layout Enumerate
If 
\begin_inset Formula $M$
\end_inset

 halted, then 
\series bold
halt and reject
\series default
.
\end_layout

\begin_layout Enumerate
Save the current configuration of 
\begin_inset Formula $M$
\end_inset

 in the area we set for configurations.
\end_layout

\begin_layout Enumerate
Go to step 
\begin_inset Formula $3$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Proof
If 
\begin_inset Formula $M'$
\end_inset

 accepts 
\begin_inset Formula $\left\langle M\right\rangle $
\end_inset

, then it's only in step 
\begin_inset Formula $5$
\end_inset

.
\end_layout

\begin_layout Proof
Since 
\begin_inset Formula $M'$
\end_inset

 branching follows that of 
\begin_inset Formula $M$
\end_inset

, then it means that we repeated a configuration.
\end_layout

\begin_layout Proof
And for the other direction:
\end_layout

\begin_layout Proof
Assume 
\begin_inset Formula $M$
\end_inset

 has a repeating configuration.
\end_layout

\begin_layout Proof
Thus, assume the repeating of the configuration is in the 
\begin_inset Formula $k$
\end_inset

th branching of 
\begin_inset Formula $M$
\end_inset

's execution.
\end_layout

\begin_layout Proof
In that case, since each step is capped to a finite execution time, we will
 keep branching and eventually reach the 
\begin_inset Formula $k$
\end_inset

th branch of execution of 
\begin_inset Formula $M$
\end_inset

.
 
\end_layout

\begin_layout Proof
At that point, one of the branches of execution of 
\begin_inset Formula $M'$
\end_inset

 will see the repeating configuration of 
\begin_inset Formula $M$
\end_inset

 and will halt, accepting 
\begin_inset Formula $\left\langle M\right\rangle $
\end_inset

.
 Thus there's a path of execution where 
\begin_inset Formula $M'$
\end_inset

 accepts 
\begin_inset Formula $\left\langle M\right\rangle $
\end_inset

.
\end_layout

\begin_layout Proof
In conclusion 
\begin_inset Formula $M$
\end_inset

 has a repeating configuration 
\begin_inset Formula $\Lra$
\end_inset

 
\begin_inset Formula $M'$
\end_inset

 will accept 
\begin_inset Formula $\left\langle M\right\rangle $
\end_inset

.
\end_layout

\begin_layout Proof
Thus 
\begin_inset Formula $L\left(M'\right)=L_{3}$
\end_inset

.
\end_layout

\begin_layout Proof
Thus 
\begin_inset Formula $L_{3}\in RE$
\end_inset

.
\end_layout

\begin_layout Proof
Let's prove that 
\begin_inset Formula $L_{3}\nin R$
\end_inset

 using a reduction 
\begin_inset Formula $HP\leq L_{3}$
\end_inset

.
 
\begin_inset Formula $f\left(\Mx\right)=\left\langle M_{x}\right\rangle $
\end_inset

 with 
\begin_inset Formula $M_{x}$
\end_inset

 NDTM defined as such (no matter what the input of it):
\end_layout

\begin_layout Proof
We already shows how we detect repeating configuration so we'll just assume
 we have that ability:
\end_layout

\begin_deeper
\begin_layout Enumerate
Run 
\begin_inset Formula $M$
\end_inset

 on 
\begin_inset Formula $x$
\end_inset

 for one step.
\end_layout

\begin_layout Enumerate
If it reached a configuration that we saw before, keep going right forever.
\end_layout

\begin_layout Enumerate
If 
\begin_inset Formula $M$
\end_inset

 halted, make an 
\begin_inset Formula $S$
\end_inset

 step staying in the same state and don't change the tape, basically do
 the step again (stay in the same configuration of 
\begin_inset Formula $M_{x}$
\end_inset

 itself).
\end_layout

\begin_layout Enumerate
Go to step 
\begin_inset Formula $1$
\end_inset

 to continue the execution of 
\begin_inset Formula $M$
\end_inset

 on 
\begin_inset Formula $x$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Proof
Since we want 
\begin_inset Formula $M_{x}$
\end_inset

 to be NDTM we can just set every branching as branching into identical
 configurations.
\end_layout

\begin_layout Proof
Now this is a full and computable function.
 Assume 
\begin_inset Formula $f\left(\Mx\right)=\left\langle M_{x}\right\rangle \in L_{3}$
\end_inset

.
 Meaning that 
\begin_inset Formula $M_{x}$
\end_inset

 repeated a configuration.
\end_layout

\begin_layout Proof
If 
\begin_inset Formula $M$
\end_inset

 repeats a configuration, then 
\begin_inset Formula $M_{x}$
\end_inset

 will keep going right forever (never repeating a configuration).
\end_layout

\begin_layout Proof
So in step 
\begin_inset Formula $1$
\end_inset

 and 
\begin_inset Formula $2$
\end_inset

 it's impossible for 
\begin_inset Formula $M_{x}$
\end_inset

 to repeat a configuration.
\end_layout

\begin_layout Proof
BWoC we reached step 
\begin_inset Formula $4$
\end_inset

 with the same configuration twice: Thus 
\begin_inset Formula $M$
\end_inset

 didn't halt and didn't repeat a configuration (otherwise we wouldn't reach
 step 
\begin_inset Formula $4$
\end_inset

).
 Thus the configuration of 
\begin_inset Formula $M'$
\end_inset

 it new since we it need to hold a config of 
\begin_inset Formula $M$
\end_inset

 that is new.
 Thus in step 
\begin_inset Formula $4$
\end_inset

 we only see new configurations.
\end_layout

\begin_layout Proof
Thus if we repeated a configuration, it's in step 
\begin_inset Formula $3$
\end_inset

 and only if 
\begin_inset Formula $M$
\end_inset

 halted.
 Thus 
\begin_inset Formula $M$
\end_inset

 halts on 
\begin_inset Formula $x$
\end_inset

 and thus 
\begin_inset Formula $\Mx\in HP$
\end_inset

.
\end_layout

\begin_layout Proof
Now assume 
\begin_inset Formula $\Mx\in HP$
\end_inset

.
\end_layout

\begin_layout Proof
Since 
\begin_inset Formula $M$
\end_inset

 halts on 
\begin_inset Formula $x$
\end_inset

 it never repeats a config.
 Thus, until 
\begin_inset Formula $M$
\end_inset

 halts, 
\begin_inset Formula $M_{x}$
\end_inset

will never repeat a config.
 Thus then 
\begin_inset Formula $M$
\end_inset

 halts, 
\begin_inset Formula $M_{x}$
\end_inset

 will enter an infinite loop staying in the same configuration (repeating
 a configuration).
\end_layout

\begin_layout Proof
Thus we proved that 
\begin_inset Formula $\Mx\in HP\Lra\left\langle M_{x}\right\rangle \in L_{3}$
\end_inset

.
\end_layout

\begin_layout Proof
But since 
\begin_inset Formula $HP\nin R$
\end_inset

 (from the reduction's theorem) we get that 
\begin_inset Formula $L_{3}\nin R$
\end_inset

 as well.
\end_layout

\begin_layout Proof
Q.E.D
\end_layout

\begin_layout Section
Kolmogorov Complexity on a finite set
\end_layout

\begin_layout Standard
Given 
\begin_inset Formula $L$
\end_inset

 language:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
f_{L}\left(x\right)=\begin{cases}
K\left(x\right) & x\in L\\
0 & else
\end{cases}
\]

\end_inset

With 
\begin_inset Formula $K\left(x\right)$
\end_inset

 Kolmogorov Complexity.
\end_layout

\end_body
\end_document
